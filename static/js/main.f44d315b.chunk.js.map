{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["saveToCookies","data","console","log","bake_cookie","JSON","stringify","App","react_default","a","createElement","react","className","App_MainView","Component","MainView","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","data-toggle","data-target","App_JobList","JobList","_this","importedData","read_cookie","cookie","length","parse","getData","handleChange","bind","assertThisInitialized","save","state","id","findIndex","item","field","uuid","temp","push","forceUpdate","splice","evt","setState","defineProperty","target","name","value","_this2","cards","map","key","empName","jobTitle","note","appDate","href","jobURL","onClick","delete","style","textAlign","tabIndex","role","aria-labelledby","aria-hidden","type","data-dismiss","aria-label","htmlFor","onChange","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f44d315b.chunk.js","sourcesContent":["import React, { Component , Fragment} from 'react';\nimport './App.css';\nimport {bake_cookie,read_cookie} from \"sfcookies\";\nimport uuid from \"uuid/v1\";\n\n\nfunction saveToCookies(data) {\n  console.log(data);\n   bake_cookie(\"jobs\",JSON.stringify(data));\n}\nfunction getData() {\n  console.log(read_cookie(\"jobs\"))\n  var cookie = read_cookie(\"jobs\")\n  if (cookie.length <= 0){\n    return [];\n  }else{\n    console.log(\"cookies exist\")\n    return JSON.parse(cookie);\n  }\n}\n\nclass App extends Component {\n  render(){\n    return(\n    <Fragment>\n      <div className=\"container-fluid\">\n        <h1>Job Tracker</h1>      \n        <MainView/>\n      </div>    \n    </Fragment>\n    )}\n}\n\nexport default App;\n\nclass MainView extends Component {\n  constructor(props){\n    super(props);\n  }\n\n  render(){\n    return(\n      <Fragment>\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <button className=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#openForm\">Add</button>\n          </div>\n          <JobList/>          \n        </div>\n      </Fragment>\n    );\n  }\n}\n\n\nclass JobList extends Component {\n  constructor(props){\n    super(props);\n    // data from cookies\n    this.importedData = getData();\n    //bind methods\n    this.handleChange = this.handleChange.bind(this);\n    this.save = this.save.bind(this);\n    this.state = {\n      id:\"\"\n    }\n  }\n  \n  update(data){\n    console.log(data);\n    let {id} = data;\n    console.log(this.importedData.findIndex(item=>item.field === id))\n  }\n\n  save(){\n    this.state.id = uuid();\n    let temp = [];\n    if (this.importedData.length != 0){\n      temp = this.importedData;\n    }\n    if (this.importedData.length === 0 ){\n      this.importedData.push(this.state)\n    }\n    \n    temp.push(this.state)\n    saveToCookies(temp);    \n    this.forceUpdate();\n  }\n\n  delete(data){\n    let {id} = data;\n    this.importedData.splice(this.importedData.findIndex(item=>item.field === id));\n    console.log(this.importedData)\n    saveToCookies(this.importedData);\n    this.forceUpdate();\n  }\n\n  handleChange(evt){\n    this.setState({\n      [evt.target.name] : evt.target.value\n    });\n  }\n  render(){    \n    var cards = \"\";\n    console.log(this.importedData)\n    if (!(this.importedData == 0)){\n       cards = this.importedData.map( (data)=>{\n        return (\n          <Fragment>\n              <div className=\"col-sm-12 col-md-4\" key={data.id}>\n                  <div className=\"card\">\n                    <div className=\"card-body text-center\">\n                      <div className=\"card-title\">\n                       <h2>{data.empName}</h2>                     \n                      </div>\n                      <div className=\"card-text\">\n                        <b>{data.jobTitle}</b>\n                        <p>{data.note}</p>\n                        <p>Application date: {data.appDate}</p>\n                        <a href={data.jobURL}>{data.jobURL}</a>\n                      </div>                     \n                      {/* <button  className=\"btn btn-info\" data-toggle=\"modal\" data-target={\"#\"+data.id} >Edit</button> */}\n                       &nbsp;\n                      <button  className=\"btn btn-danger\" onClick={this.delete.bind(this,data)}>delete</button>\n                    </div>\n                  </div>\n                  <br/>\n              </div>       \n\n          </Fragment>            \n        );\n      });\n    }else{\n      cards = <h1 style={{textAlign:\"center\"}}>Nothing yet lets start the job search...</h1> \n    }\n   \n    return(\n      <Fragment>\n        <div className=\"container\">\n          <div className=\"row\">          \n              {cards}                \n          </div>\n        </div>\n      \n        <div className=\"modal fade\" id=\"openForm\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"openForm\" aria-hidden=\"true\">\n      <div className=\"modal-dialog\" role=\"document\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\" id=\"exampleModalLongTitle\">Add Job</h5>\n            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div className=\"modal-body\">\n            <form>\n                <div className=\"form-group\">\n                    <label htmlFor=\"empName\">Employer Name</label>\n                    <input className=\"form-control\" type=\"text\" name=\"empName\" onChange={this.handleChange}/>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"jobTitle\">Job Title</label>\n                    <input className=\"form-control\" type=\"text\" name=\"jobTitle\" onChange={this.handleChange}/>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"jobURL\">Job URL</label>\n                    <input className=\"form-control\" type=\"text\" name=\"jobURL\" onChange={this.handleChange}/>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"appDate\">Application Date</label>\n                    <input className=\"form-control\" type=\"date\" name=\"appDate\" onChange={this.handleChange}/>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"contact\">Contact</label>\n                    <input className=\"form-control\" type=\"text\" name=\"contact\" onChange={this.handleChange}/>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"notes\">Notes</label>\n                    <textarea className=\"form-control\" type=\"text\" name=\"note\" onChange={this.handleChange}/>\n                </div>\n            </form>\n          </div>\n          <div className=\"modal-footer\">\n            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n            <button type=\"button\" className=\"btn btn-primary\" data-dismiss=\"modal\" onClick={this.save}>Save changes</button>\n          </div>\n        </div>\n      </div>\n     </div>  \n      </Fragment>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}