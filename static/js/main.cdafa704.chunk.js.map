{"version":3,"sources":["components/bootstrapModals/BootstrapModals.js","components/bootstrapCards/BootstrapCards.js","MainContainer/MainContainer.js","components/loadingScreen/LoadingScreen.js","App.js","serviceWorker.js","index.js"],"names":["BootstrapModals","props","react_default","a","createElement","className","id","type","data","companyName","tabIndex","role","aria-labelledby","aria-hidden","data-dismiss","aria-label","htmlFor","onChange","onChangeModal","name","defaultValue","jobTitle","jobUrl","appDate","contact","notes","onClick","onSaveModal","onUpdateModal","BootstrapCards","style","textAlign","margin","minHeight","width","data-target","data-toggle","color","href","target","rel","onDeleteCards","MainContainer","evt","this","setState","Object","defineProperty","value","console","log","jobs","JSON","parse","localStorage","getItem","filter","setItem","stringify","forceUpdate","_Jobs","state","uuid","push","i","length","prop","hasOwnProperty","undefined","_this","map","key","bootstrapCards_BootstrapCards","bind","_this2","bootstrapModals_BootstrapModals","marginTop","mapToModals","mapJobs","Component","LoadingScreen","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isLoading","setTimeout","react","src_MainContainer_MainContainer","loadingScreen_LoadingScreen","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cdafa704.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst BootstrapModals = (props) => {\r\n    return (\r\n        <div className=\"modal fade\"  id={props.type === \"add\" ? \"appModal\" : props.data.companyName+props.data.id} tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n            <div className=\"modal-dialog\" role=\"document\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <h5 className=\"modal-title\">{props.type === \"add\" ? \"New Application\" : \"Update\"}</h5>\r\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                    {/* form content goes here */}\r\n                    {\r\n                        props.type === \"add\" \r\n                        ?\r\n                        <form>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"companyName\">Company Name</label>\r\n                                <input type=\"text\" onChange={props.onChangeModal} name=\"companyName\" className=\"form-control\"/>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"jobTitle\">Job Title</label>\r\n                                <input type=\"text\" onChange={props.onChangeModal} name=\"jobTitle\" className=\"form-control\"/>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"jobUrl\">Job Url</label>\r\n                                <input type=\"text\" onChange={props.onChangeModal} name=\"jobUrl\" defaultValue=\"https://\" className=\"form-control\"/>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"appDate\">Application Date</label>\r\n                                <input type=\"text\" onChange={props.onChangeModal} name=\"appDate\"  className=\"form-control\"/>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"contact\">Contact</label>\r\n                                <input type=\"text\" onChange={props.onChangeModal} name=\"contact\" className=\"form-control\"/>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"notes\">Notes</label>\r\n                                <textarea type=\"text\" onChange={props.onChangeModal} name=\"notes\" className=\"form-control\"/>\r\n                            </div>\r\n                        </form>    \r\n                        :\r\n                        <form>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"companyName\">Company Name</label>\r\n                                <input type=\"text\" onChange={props.onChangeModal} name=\"companyName\" defaultValue={props.data.companyName} className=\"form-control\"/>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"jobTitle\">Job Title</label>\r\n                                <input type=\"text\" onChange={props.onChangeModal} name=\"jobTitle\" defaultValue={props.data.jobTitle} className=\"form-control\"/>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"jobUrl\">Job Url</label>\r\n                                <input type=\"text\" onChange={props.onChangeModal} name=\"jobUrl\" defaultValue={props.data.jobUrl} className=\"form-control\"/>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"appDate\">Application Date</label>\r\n                                <input type=\"text\" onChange={props.onChangeModal} name=\"appDate\" defaultValue={props.data.appDate} className=\"form-control\"/>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"contact\">Contact</label>\r\n                                <input type=\"text\" onChange={props.onChangeModal} name=\"contact\" defaultValue={props.data.contact} className=\"form-control\"/>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"notes\">Notes</label>\r\n                                <textarea type=\"text\" onChange={props.onChangeModal}  name=\"notes\" defaultValue={props.data.notes} className=\"form-control\"/>\r\n                            </div>\r\n                        </form> \r\n                    }\r\n                        \r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button type=\"submit\" className=\"btn btn-info\" data-dismiss=\"modal\" onClick={props.type === \"add\" ? props.onSaveModal  : props.onUpdateModal}   >{props.type === \"add\" ? \"Save changes\" : \"Update changes\" }</button>\r\n                        <button type=\"button\" className=\"btn btn-danger\" data-dismiss=\"modal\">Close</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default BootstrapModals;","import React from 'react';\r\n\r\nconst BootstrapCards = (props) => {\r\n  const {data} = props;\r\n  return (\r\n\r\n        <div\r\n                        className=\"card \"\r\n                        style={{\r\n                        textAlign: \"center\",\r\n                        margin: \"10px 0px\",\r\n                        minHeight: \"300px\",\r\n                        width: \"100%\"\r\n                    }}>\r\n                        <div className=\"card-body\">\r\n                            <button\r\n                                className=\"btn edit-button\"                                \r\n                                data-target={\"#\"+data.companyName+data.id}\r\n                                data-toggle=\"modal\"\r\n                                >Edit</button>\r\n                            <br/>\r\n                            <div className=\"title\">\r\n                                <h2\r\n                                    style={{\r\n                                    color: \"#17a2b8\"\r\n                                }}>{data.companyName}</h2>\r\n                            </div>\r\n                            <div className=\"card-text\">\r\n                                <h4>{data.jobTitle}</h4>                            \r\n                                    <a href={data.jobUrl} target=\"_blank\" rel=\"noopener noreferrer\">{data.jobUrl}</a>                                \r\n                                <h4>{data.appDate}</h4>\r\n                                <h4>{data.contact}</h4>\r\n                                <h4>{data.notes}</h4>\r\n                            </div>\r\n                        </div>\r\n                        <button\r\n                            className=\"btn btn-danger\"\r\n                            onClick={props\r\n                            .onDeleteCards}\r\n                            style={{\r\n                            width: \"100%\"\r\n                        }}>Delete</button>\r\n                    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default BootstrapCards;","import React, {Component} from 'react';\r\nimport BootstrapModals from './../components/bootstrapModals/BootstrapModals';\r\nimport uuid from \"uuid\";\r\nimport BootstrapCards from '../components/bootstrapCards/BootstrapCards';\r\n\r\nclass MainContainer extends Component {\r\n\r\n    onChangeModal(evt) {\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        });\r\n    }\r\n\r\n    onDeleteCards(id) {\r\n        console.log(id);\r\n        let jobs = JSON.parse(localStorage.getItem(\"aqsam_jobs\"));\r\n        jobs = jobs.filter((data) => {\r\n            return (data.id !== id)\r\n        });\r\n        localStorage.setItem(\"aqsam_jobs\", JSON.stringify(jobs));\r\n        this.forceUpdate();\r\n    }\r\n\r\n    onSaveModal(evt) {\r\n        var _Jobs = JSON.parse(localStorage.getItem(\"aqsam_jobs\"));\r\n        // unique id\r\n        this.state.id = uuid();\r\n\r\n        if (_Jobs == null) {\r\n            _Jobs = [];\r\n            _Jobs.push(this.state)\r\n        } else {\r\n            _Jobs.push(this.state);\r\n        }\r\n        localStorage.setItem(\"aqsam_jobs\", JSON.stringify(_Jobs));\r\n        this.forceUpdate();\r\n    }\r\n\r\n    onUpdateModal(id) {\r\n        var _Jobs = JSON.parse(localStorage.getItem(\"aqsam_jobs\"));\r\n        console.log(id);\r\n        console.log(_Jobs[0]);\r\n        for (var i = 0 ; i < _Jobs.length; i++){\r\n            for (let prop in _Jobs[i]) {\r\n               if(_Jobs[i].hasOwnProperty(prop)){\r\n                   if(_Jobs[i].id === id){\r\n                        if(this.state[prop] !== undefined){\r\n                            console.log(this.state[prop]);\r\n                            _Jobs[i][prop] = this.state[prop];\r\n                            console.log(_Jobs[i]);\r\n                        }   \r\n                   }                                   \r\n               }               \r\n            }\r\n        } \r\n       localStorage.setItem(\"aqsam_jobs\",JSON.stringify(_Jobs));  \r\n       this.forceUpdate();\r\n    }\r\n\r\n    mapJobs() {\r\n        let jobs = JSON.parse(localStorage.getItem(\"aqsam_jobs\"));\r\n        // Cards\r\n        return (jobs.map((data, i) => {\r\n            return (\r\n                <div key={i} className=\"col-sm-12 col-md-4\">\r\n                    <BootstrapCards\r\n                        data={data}\r\n                        onDeleteCards={this\r\n                        .onDeleteCards\r\n                        .bind(this, data.id)}/>\r\n                </div>\r\n\r\n            )\r\n        }));\r\n    }\r\n\r\n    mapToModals() {\r\n        let jobs = JSON.parse(localStorage.getItem(\"aqsam_jobs\"));\r\n        // Cards\r\n        return (jobs.map((data, i) => {\r\n            return (<BootstrapModals\r\n                key={i}\r\n                onChangeModal={this\r\n                .onChangeModal\r\n                .bind(this)}\r\n                onUpdateModal={this\r\n                .onUpdateModal\r\n                .bind(this, data.id)}\r\n                data={data}\r\n                type=\"update\"/>)\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"MainContainer\">\r\n                {/* Add buttons */}\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-12\">\r\n                            <button\r\n                                className=\"btn btn-info\"\r\n                                data-toggle=\"modal\"\r\n                                data-target=\"#appModal\"\r\n                                style={{\r\n                                marginTop: \"10px\"\r\n                            }}>Add Job</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* Modal */}\r\n                { localStorage.getItem(\"aqsam_jobs\") === null || JSON\r\n                            .parse(localStorage.getItem(\"aqsam_jobs\"))\r\n                            .length === 0  ? \"\" :this.mapToModals()}\r\n                <BootstrapModals\r\n                    onChangeModal={this\r\n                    .onChangeModal\r\n                    .bind(this)}\r\n                    onSaveModal={this\r\n                    .onSaveModal\r\n                    .bind(this)}\r\n                    type=\"add\"/> {/* Render content area */}\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        {localStorage.getItem(\"aqsam_jobs\") === null || JSON\r\n                            .parse(localStorage.getItem(\"aqsam_jobs\"))\r\n                            .length === 0\r\n                            ? <h1>Lets get the job search going</h1>\r\n                            : this.mapJobs()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainContainer;","import React from 'react';\r\n\r\nconst LoadingScreen = () => {\r\n    return (\r\n        <div id=\"loader-wrapper\">\r\n            <div id=\"loader\"></div>\r\n            <div className=\"loader-section section-left\"></div>\r\n            <div className=\"loader-section section-right\"></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoadingScreen;","import React, { Component, Fragment} from \"react\";\r\nimport MainContainer from './MainContainer/MainContainer';\r\n\r\nimport \"./App.css\";\r\nimport LoadingScreen from './components/loadingScreen/LoadingScreen';\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      isLoading: false\r\n    }\r\n  }\r\n  componentDidMount(){\r\n    console.log(\"update\")\r\n    setTimeout(() => {\r\n      this.setState({\r\n        isLoading : true\r\n      });\r\n    }, 1200);\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <Fragment>\r\n        {this.state.isLoading === true ?  <MainContainer/> : <LoadingScreen/>}       \r\n      </Fragment>\r\n    )\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}