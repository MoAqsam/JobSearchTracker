{"version":3,"sources":["components/bootstrapModals/BootstrapModals.js","MainContainer/MainContainer.js","App.js","serviceWorker.js","index.js"],"names":["BootstrapModals","props","console","log","react_default","a","createElement","className","id","tabIndex","role","aria-labelledby","aria-hidden","type","data-dismiss","aria-label","htmlFor","onChange","onChangeModal","name","onClick","onSaveModal","MainContainer","JSON","parse","localStorage","getItem","evt","this","setState","Object","defineProperty","target","value","jobs","filter","data","setItem","stringify","forceUpdate","_Jobs","state","uuid","push","_this","map","i","key","style","textAlign","margin","minHeight","width","color","companyName","jobTitle","jobUrl","appDate","contact","notes","delete","bind","data-toggle","data-target","marginTop","bootstrapModals_BootstrapModals","length","mapJobs","Component","App","src_MainContainer_MainContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b6c984f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst BootstrapModals = (props) => {\r\n    console.log(props);\r\n    return (\r\n        <div className=\"modal fade\"  id=\"appModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n            <div className=\"modal-dialog\" role=\"document\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <h5 className=\"modal-title\">New application</h5>\r\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                    {/* form content goes here */}\r\n                        <form>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"companyName\">Company Name</label>\r\n                                <input type=\"text\" onChange={props.onChangeModal} name=\"companyName\" className=\"form-control\"/>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"jobTitle\">Job Title</label>\r\n                                <input type=\"text\" onChange={props.onChangeModal} name=\"jobTitle\" className=\"form-control\"/>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"jobUrl\">Job Url</label>\r\n                                <input type=\"text\" onChange={props.onChangeModal} name=\"jobUrl\" className=\"form-control\"/>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"appDate\">Application Date</label>\r\n                                <input type=\"text\" onChange={props.onChangeModal} name=\"appDate\" className=\"form-control\"/>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"contact\">Contact</label>\r\n                                <input type=\"text\" onChange={props.onChangeModal} name=\"contact\" className=\"form-control\"/>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"notes\">Notes</label>\r\n                                <textarea type=\"text\" onChange={props.onChangeModal} name=\"notes\" className=\"form-control\"/>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button type=\"button\" className=\"btn btn-info\" data-dismiss=\"modal\" onClick={props.onSaveModal}>Save changes</button>\r\n                        <button type=\"button\" className=\"btn btn-danger\" data-dismiss=\"modal\">Close</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default BootstrapModals;","import React, {Component} from 'react';\r\nimport BootstrapModals from './../components/bootstrapModals/BootstrapModals';\r\nimport uuid from \"uuid\";\r\n\r\nclass MainContainer extends Component {\r\n\r\n    componentDidMount() {\r\n        // localStorage.removeItem(\"aqsam_jobs\")\r\n\r\n        console.log(JSON.parse(localStorage.getItem(\"aqsam_jobs\")))\r\n    }\r\n\r\n    onChangeModal(evt) {\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        });\r\n    }\r\n\r\n    delete(id){\r\n       let jobs = JSON.parse(localStorage.getItem(\"aqsam_jobs\"));\r\n        jobs = jobs.filter((data)=>{\r\n          return (data.id !== id)\r\n        });\r\n        localStorage.setItem(\"aqsam_jobs\",JSON.stringify(jobs));\r\n        this.forceUpdate();\r\n    } \r\n\r\n    onSaveModal(evt) {\r\n        var _Jobs = JSON.parse(localStorage.getItem(\"aqsam_jobs\"));\r\n        // unique id\r\n        this.state.id = uuid();\r\n\r\n        if (_Jobs == null) {\r\n            _Jobs = [];\r\n            _Jobs.push(this.state)\r\n        } else {\r\n            _Jobs.push(this.state);\r\n        }\r\n        localStorage.setItem(\"aqsam_jobs\", JSON.stringify(_Jobs));\r\n        this.forceUpdate();\r\n    }\r\n\r\n    mapJobs() {\r\n        let jobs = JSON.parse(localStorage.getItem(\"aqsam_jobs\"));\r\n        // Cards\r\n        return (jobs.map( (data, i) => {\r\n            return (\r\n                <div key={i} className=\"col-sm-12 col-md-4\">\r\n                    <div\r\n                        className=\"card \"\r\n                        style={{\r\n                        textAlign: \"center\",\r\n                        margin: \"10px 0px\",\r\n                        minHeight: \"300px\",\r\n                        width:\"100%\"\r\n                    }}>\r\n                        <div className=\"card-body\">\r\n                            <div className=\"title\">\r\n                                <h2 style={{color:\"#17a2b8\"}}>{data.companyName}</h2>\r\n                            </div>\r\n                            <div className=\"card-text\">\r\n                                <h4>{data.jobTitle}</h4>\r\n                                <h4>{data.jobUrl}</h4>\r\n                                <h4>{data.appDate}</h4>\r\n                                <h4>{data.contact}</h4>\r\n                                <h4>{data.notes}</h4>\r\n                            </div>\r\n                        </div>\r\n                        <button className=\"btn btn-danger\" onClick={this.delete.bind(this,data.id)}>Delete</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"MainContainer\">\r\n                {/* Add buttons */}\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-12\">\r\n                            <button\r\n                                className=\"btn btn-info\"\r\n                                data-toggle=\"modal\"\r\n                                data-target=\"#appModal\"\r\n                                style={{\r\n                                marginTop: \"10px\"\r\n                            }}>Add Job</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* Modal */}\r\n                <BootstrapModals\r\n                    onChangeModal={this\r\n                    .onChangeModal\r\n                    .bind(this)}\r\n                    onSaveModal={this\r\n                    .onSaveModal\r\n                    .bind(this)}/> {/* Render content area */}\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n\r\n                        {localStorage.getItem(\"aqsam_jobs\") === null || JSON.parse(localStorage.getItem(\"aqsam_jobs\")).length === 0\r\n                            ? <h1>Lets get the job search going</h1>\r\n                            : this.mapJobs()}\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainContainer;","import React, { Component} from \"react\";\r\nimport MainContainer from './MainContainer/MainContainer';\r\n\r\nclass App extends Component {\r\n  render(){\r\n    return(\r\n      <MainContainer/>\r\n    )\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}